        -:    0:Source:transformer.cpp
        -:    0:Graph:transformer.gcno
        -:    0:Data:transformer.gcda
        -:    0:Runs:1
        -:    1:#include <bits/stdc++.h>
        -:    2:using namespace std;
        -:    3:
        -:    4:vector<vector<double>> concatenate_heads(vector<vector<double>>&, size_t, size_t, size_t);
        -:    5:void add_bias(vector<vector<double>>&, vector<double>&);
        -:    6:vector<vector<double>> genRandomMatrix(size_t, size_t);
        -:    7:vector<vector<double>> split_heads(vector<vector<double>>&, size_t, size_t);
        -:    8:vector<vector<double>> matmul(vector<vector<double>>&, vector<vector<double>>&);
        -:    9:void softmax_rows(vector<vector<double>>&);
        -:   10:vector<vector<double>> softmax(vector<vector<double>>&);
        -:   11:vector<vector<double>> matrixTranspose(vector<vector<double>>&);
        -:   12:vector<vector<double>> read_data(string, size_t, size_t);
        -:   13:vector<vector<double>> get_positional_encoding(size_t, size_t);
        -:   14:vector<vector<double>> add_vectors(vector<vector<double>>&, vector<vector<double>>&);
        -:   15:vector<vector<double>> layer_norm(vector<vector<float>>&, vector<float>&, vector<float>&, float);
        -:   16:
        -:   17:class MultiHeadAttention {
        -:   18:    public:
        -:   19:        size_t d_model, num_heads, d_key, d_value;
        -:   20:        vector<vector<double>> WQ, WK, WV, WO;
        -:   21:
function _ZN18MultiHeadAttentionC2Emm called 1 returned 100% blocks executed 70%
        1:   22:        MultiHeadAttention(size_t d_model, size_t num_heads) : d_model(d_model), num_heads(num_heads) {
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
       1*:   23:            assert(d_model % num_heads == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
call    2 never executed
        1:   24:            this->d_model = d_model;
        1:   25:            this->num_heads = num_heads;
        1:   26:            this->d_key = d_model / num_heads;
        1:   27:            this->d_value = d_model / num_heads;
        1:   28:            this->WQ = genRandomMatrix(d_model, d_model);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
        1:   29:            this->WK = genRandomMatrix(d_model, d_model);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
        1:   30:            this->WV = genRandomMatrix(d_model, d_model);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
        1:   31:            this->WO = genRandomMatrix(d_model, d_model);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
        1:   32:        }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   33:
function _ZN18MultiHeadAttention7forwardERSt6vectorIS0_IdSaIdEESaIS2_EE called 1 returned 100% blocks executed 67%
        1:   34:        vector<vector<double>> forward(vector<vector<double>>& x) {
        1:   35:            size_t seq_len = x.size();
call    0 returned 1
        -:   36:
        1:   37:            vector<vector<double>> Q = matmul(x, WQ);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   38:            vector<vector<double>> K = matmul(x, WK);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   39:            vector<vector<double>> V = matmul(x, WV);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   40:
        1:   41:            vector<vector<double>> Q_heads = split_heads(Q, num_heads, d_key);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   42:            vector<vector<double>> K_heads = split_heads(K, num_heads, d_key);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   43:            vector<vector<double>> V_heads = split_heads(V, num_heads, d_value);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   44:
        1:   45:            vector<vector<double>> attention_heads(num_heads * seq_len);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:   46:
       51:   47:            for (size_t i = 0; i < num_heads; i++) {
branch  0 taken 50
branch  1 taken 1 (fallthrough)
      150:   48:                vector<vector<double>> Q_head(seq_len), K_head(seq_len), V_head(seq_len);
call    0 returned 50
call    1 returned 50
branch  2 taken 50 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 50
call    5 returned 50
branch  6 taken 50 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 50
call    9 returned 50
branch 10 taken 50 (fallthrough)
branch 11 taken 0 (throw)
        -:   49:
     5050:   50:                for (size_t j = 0; j < seq_len; j++) {
branch  0 taken 5000
branch  1 taken 50 (fallthrough)
     5000:   51:                    Q_head[j] = Q_heads[i * seq_len + j];
call    0 returned 5000
call    1 returned 5000
call    2 returned 5000
branch  3 taken 5000 (fallthrough)
branch  4 taken 0 (throw)
     5000:   52:                    K_head[j] = K_heads[i * seq_len + j];
call    0 returned 5000
call    1 returned 5000
call    2 returned 5000
branch  3 taken 5000 (fallthrough)
branch  4 taken 0 (throw)
     5000:   53:                    V_head[j] = V_heads[i * seq_len + j];
call    0 returned 5000
call    1 returned 5000
call    2 returned 5000
branch  3 taken 5000 (fallthrough)
branch  4 taken 0 (throw)
        -:   54:                }
        -:   55:
       50:   56:                vector<vector<double>> K_head_T = matrixTranspose(K_head);
call    0 returned 50
branch  1 taken 50 (fallthrough)
branch  2 taken 0 (throw)
       50:   57:                vector<vector<double>> attention_scores = matmul(Q_head, K_head_T);
call    0 returned 50
branch  1 taken 50 (fallthrough)
branch  2 taken 0 (throw)
        -:   58:
       50:   59:                double scale = sqrt(d_key);
call    0 returned 50
     5050:   60:                for (auto& row : attention_scores) {
call    0 returned 50
call    1 returned 50
call    2 returned 5000
call    3 returned 5000
call    4 returned 5050
branch  5 taken 5000
branch  6 taken 50 (fallthrough)
   505000:   61:                    for (auto& val : row) {
call    0 returned 5000
call    1 returned 5000
call    2 returned 500000
call    3 returned 505000
branch  4 taken 500000
branch  5 taken 5000 (fallthrough)
   500000:   62:                        val /= scale;
call    0 returned 500000
        -:   63:                    }
        -:   64:                }
        -:   65:
       50:   66:                softmax_rows(attention_scores);
call    0 returned 50
branch  1 taken 50 (fallthrough)
branch  2 taken 0 (throw)
        -:   67:
       50:   68:                vector<vector<double>> attention_output = matmul(attention_scores, V_head);
call    0 returned 50
branch  1 taken 50 (fallthrough)
branch  2 taken 0 (throw)
        -:   69:
     5050:   70:                for (size_t j = 0; j < seq_len; j++) {
branch  0 taken 5000
branch  1 taken 50 (fallthrough)
     5000:   71:                    attention_heads[i * seq_len + j] = move(attention_output[j]);
call    0 returned 5000
call    1 returned 5000
call    2 returned 5000
call    3 returned 5000
        -:   72:                }
       50:   73:            }
call    0 returned 50
call    1 returned 50
call    2 returned 50
call    3 returned 50
call    4 returned 50
call    5 returned 50
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:   74:
        1:   75:            vector<vector<double>> concat = concatenate_heads(attention_heads, num_heads, seq_len, d_value);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   76:
        1:   77:            vector<vector<double>> output = matmul(concat, WO);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   78:
        2:   79:            return output;
        1:   80:        }
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -:   81:};
        -:   82:
        -:   83:class FeedForward {
        -:   84:    public:
        -:   85:        size_t d_model, ff_dim;
        -:   86:        vector<vector<double>> W1, W2;
        -:   87:        vector<double> b1, b2;
        -:   88:
function _ZN11FeedForwardC2Emm called 1 returned 100% blocks executed 59%
        1:   89:        FeedForward(size_t d_model, size_t ff_dim) : d_model(d_model), ff_dim(ff_dim) {
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        1:   90:            this->W1 = genRandomMatrix(d_model, ff_dim);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
        1:   91:            this->b1 = vector<double>(ff_dim, 0.0f);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 never executed
        1:   92:            this->W2 = genRandomMatrix(ff_dim, d_model);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
        1:   93:            this->b2 = vector<double>(d_model, 0.0f);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 never executed
        1:   94:        }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   95:
function _ZN11FeedForward7forwardERSt6vectorIS0_IdSaIdEESaIS2_EE called 1 returned 100% blocks executed 92%
        1:   96:        vector<vector<double>> forward(vector<vector<double>>& x) {
        -:   97:            // Layer 1
        1:   98:            vector<vector<double>> h1 = matmul(x, W1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   99:            add_bias(h1, b1);
call    0 returned 1
        -:  100:
        -:  101:            // ReLU activation
      101:  102:            for (auto& row : h1) {
call    0 returned 1
call    1 returned 1
call    2 returned 100
call    3 returned 100
call    4 returned 101
branch  5 taken 100
branch  6 taken 1 (fallthrough)
   128100:  103:                for (auto& val : row) {
call    0 returned 100
call    1 returned 100
call    2 returned 128000
call    3 returned 128100
branch  4 taken 128000
branch  5 taken 100 (fallthrough)
   128000:  104:                    val = max(0.0, val);
call    0 returned 128000
call    1 returned 128000
        -:  105:                }
        -:  106:            }
        -:  107:
        -:  108:            // Layer 2
        1:  109:            vector<vector<double>> h2 = matmul(h1, W2);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  110:            add_bias(h2, b2);
call    0 returned 1
        -:  111:
        2:  112:            return h2;
        1:  113:        }
call    0 returned 1
call    1 never executed
        -:  114:};
        -:  115:
function _Z17concatenate_headsRSt6vectorIS_IdSaIdEESaIS1_EEmmm called 1 returned 100% blocks executed 70%
        1:  116:vector<vector<double>> concatenate_heads(vector<vector<double>>& x, size_t num_heads, size_t seq_len, size_t d_value) {
        2:  117:    vector<vector<double>> X(seq_len, vector<double>(num_heads * d_value, 0.0f));
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
       51:  118:    for (size_t i = 0; i < num_heads; i++) {
branch  0 taken 50
branch  1 taken 1 (fallthrough)
     5050:  119:        for (size_t j = 0; j < seq_len; j++) {
branch  0 taken 5000
branch  1 taken 50 (fallthrough)
    55000:  120:            for (size_t k = 0; k < d_value; k++) {
branch  0 taken 50000
branch  1 taken 5000 (fallthrough)
    50000:  121:                X[j][i * d_value + k] = x[i * seq_len + j][k];
call    0 returned 50000
call    1 returned 50000
call    2 returned 50000
call    3 returned 50000
        -:  122:            }
        -:  123:        }
        -:  124:    }
        1:  125:    return X;
        -:  126:}
        -:  127:
function _Z8add_biasRSt6vectorIS_IdSaIdEESaIS1_EERS1_ called 2 returned 100% blocks executed 94%
        2:  128:void add_bias(vector<vector<double>>& x, vector<double>& b) {
       2*:  129:    assert(x[0].size() == b.size());
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 0 (fallthrough)
branch  4 taken 2
call    5 never executed
      202:  130:    for (auto& row : x) {
call    0 returned 2
call    1 returned 2
call    2 returned 200
call    3 returned 200
call    4 returned 202
branch  5 taken 200
branch  6 taken 2 (fallthrough)
   178200:  131:        for (size_t i = 0; i < row.size(); i++) {
call    0 returned 178200
branch  1 taken 178000
branch  2 taken 200 (fallthrough)
   178000:  132:            row[i] += b[i];
call    0 returned 178000
call    1 returned 178000
        -:  133:        }
        -:  134:    }
        2:  135:}
        -:  136:
function _Z15genRandomMatrixmm called 6 returned 100% blocks executed 66%
        6:  137:vector<vector<double>> genRandomMatrix(size_t rows, size_t cols) {
       12:  138:    vector<vector<double>> matrix(rows, vector<double>(cols, 0.0f));
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 6
branch  6 taken 6 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 6
call    9 returned 6
     3786:  139:    for (size_t i = 0; i < rows; i++) {
branch  0 taken 3780
branch  1 taken 6 (fallthrough)
  2283780:  140:        for (size_t j = 0; j < cols; j++) {
branch  0 taken 2280000
branch  1 taken 3780 (fallthrough)
  2280000:  141:            matrix[i][j] = (double)rand() / RAND_MAX;
call    0 returned 2280000
call    1 returned 2280000
call    2 returned 2280000
        -:  142:        }
        -:  143:    }
        6:  144:    return matrix;
        -:  145:}
        -:  146:
function _Z11split_headsRSt6vectorIS_IdSaIdEESaIS1_EEmm called 3 returned 100% blocks executed 72%
        3:  147:vector<vector<double>> split_heads(vector<vector<double>>& x, size_t num_heads, size_t d_head) {
        3:  148:    size_t seq_len = x.size();
call    0 returned 3
        3:  149:    size_t d_model = x[0].size();
call    0 returned 3
call    1 returned 3
        6:  150:    vector<vector<double>> X_split(seq_len * num_heads, vector<double>(d_head, 0.0f));
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 3
call    9 returned 3
        -:  151:
      153:  152:    for (size_t h = 0; h < num_heads; ++h) {
branch  0 taken 150
branch  1 taken 3 (fallthrough)
    15150:  153:        for (size_t i = 0; i < seq_len; ++i) {
branch  0 taken 15000
branch  1 taken 150 (fallthrough)
   165000:  154:            for (size_t j = 0; j < d_head; ++j) {
branch  0 taken 150000
branch  1 taken 15000 (fallthrough)
   150000:  155:                X_split[h * seq_len + i][j] = x[i][h * d_head + j];
call    0 returned 150000
call    1 returned 150000
call    2 returned 150000
call    3 returned 150000
        -:  156:            }
        -:  157:        }
        -:  158:    }
        3:  159:    return X_split;
        -:  160:}
        -:  161:
function _Z6matmulRSt6vectorIS_IdSaIdEESaIS1_EES4_ called 106 returned 100% blocks executed 75%
      106:  162:vector<vector<double>> matmul(vector<vector<double>>& a, vector<vector<double>>& b) {
      106:  163:    size_t n = a.size(), m = a[0].size(), p = b[0].size();
call    0 returned 106
call    1 returned 106
call    2 returned 106
call    3 returned 106
call    4 returned 106
      212:  164:    vector<vector<double>> c(n, vector<double>(p, 0));
call    0 returned 106
call    1 returned 106
call    2 returned 106
branch  3 taken 106 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 106
branch  6 taken 106 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 106
call    9 returned 106
    10706:  165:    for (size_t i = 0; i < n; i++) {
branch  0 taken 10600
branch  1 taken 106 (fallthrough)
   938600:  166:        for (size_t j = 0; j < p; j++) {
branch  0 taken 928000
branch  1 taken 10600 (fallthrough)
238928000:  167:            for (size_t k = 0; k < m; k++) {
branch  0 taken 238000000
branch  1 taken 928000 (fallthrough)
238000000:  168:                c[i][j] += a[i][k] * b[k][j];
call    0 returned 238000000
call    1 returned 238000000
call    2 returned 238000000
call    3 returned 238000000
call    4 returned 238000000
call    5 returned 238000000
        -:  169:            }
        -:  170:        }
        -:  171:    }
      106:  172:    return c;
        -:  173:}
        -:  174:
function _Z12softmax_rowsRSt6vectorIS_IdSaIdEESaIS1_EE called 50 returned 100% blocks executed 100%
       50:  175:void softmax_rows(vector<vector<double>>& a) {
     5050:  176:    for (auto& row : a) {
call    0 returned 50
call    1 returned 50
call    2 returned 5000
call    3 returned 5000
call    4 returned 5050
branch  5 taken 5000
branch  6 taken 50 (fallthrough)
     5000:  177:        double max_val = *max_element(row.begin(), row.end());
call    0 returned 5000
call    1 returned 5000
call    2 returned 5000
branch  3 taken 5000 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 5000
     5000:  178:        double sum = 0.0f;
   505000:  179:        for (auto& val : row) {
call    0 returned 5000
call    1 returned 5000
call    2 returned 500000
call    3 returned 505000
branch  4 taken 500000
branch  5 taken 5000 (fallthrough)
   500000:  180:            val = exp(val - max_val);
   500000:  181:            sum += val;
call    0 returned 500000
        -:  182:        }
   505000:  183:        for (auto& val : row) {
call    0 returned 5000
call    1 returned 5000
call    2 returned 500000
call    3 returned 505000
branch  4 taken 500000
branch  5 taken 5000 (fallthrough)
   500000:  184:            val /= sum;
call    0 returned 500000
        -:  185:        }
        -:  186:    }
       50:  187:}
        -:  188:
function _Z7softmaxRSt6vectorIS_IdSaIdEESaIS1_EE called 0 returned 0% blocks executed 0%
    #####:  189:vector<vector<double>> softmax(vector<vector<double>>& a){
    #####:  190:    for(auto& row : a){
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  191:        double max_val = *max_element(row.begin(), row.end());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  192:        double sum = 0.0f;
    #####:  193:        for(auto& val : row){
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  194:            val = exp(val - max_val);
    #####:  195:            sum += val;
call    0 never executed
        -:  196:        }
    #####:  197:        for(auto& val : row){
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  198:            val /= sum;
call    0 never executed
        -:  199:        }
        -:  200:    }
    #####:  201:    return a;
call    0 never executed
        -:  202:}
        -:  203:
function _Z15matrixTransposeRSt6vectorIS_IdSaIdEESaIS1_EE called 50 returned 100% blocks executed 72%
       50:  204:vector<vector<double>> matrixTranspose(vector<vector<double>>& a){
      100:  205:    vector<vector<double>> b(a[0].size(), vector<double>(a.size(), 0));
call    0 returned 50
call    1 returned 50
call    2 returned 50
call    3 returned 50
branch  4 taken 50 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 50
call    7 returned 50
call    8 returned 50
branch  9 taken 50 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 50
call   12 returned 50
     5050:  206:    for (size_t i = 0; i < a.size(); i++) {
call    0 returned 5050
branch  1 taken 5000
branch  2 taken 50 (fallthrough)
    55000:  207:        for (size_t j = 0; j < a[0].size(); j++) {
call    0 returned 55000
call    1 returned 55000
branch  2 taken 50000
branch  3 taken 5000 (fallthrough)
    50000:  208:            b[j][i] = a[i][j];
call    0 returned 50000
call    1 returned 50000
call    2 returned 50000
call    3 returned 50000
        -:  209:        }
        -:  210:    }
       50:  211:    return b;
        -:  212:}
        -:  213:
function _Z9read_dataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm called 1 returned 100% blocks executed 61%
        1:  214:vector<vector<double>> read_data(string filename, size_t sequence_length, size_t embed_dim) {
        1:  215:    ifstream file(filename);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  216:    if (!file.is_open()) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####:  217:        cout << "File not found!" << endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  218:        return {};
call    0 never executed
        -:  219:    }
        1:  220:    vector<vector<double>> data;
call    0 returned 1
        1:  221:    string line;
call    0 returned 1
      101:  222:    while (getline(file, line)) {
call    0 returned 101
branch  1 taken 101 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 101
branch  4 taken 101 (fallthrough)
branch  5 taken 0 (throw)
branch  6 taken 100
branch  7 taken 1 (fallthrough)
      100:  223:        stringstream ss(line);
call    0 returned 100
call    1 returned 100
branch  2 taken 100 (fallthrough)
branch  3 taken 0 (throw)
      100:  224:        vector<double> vec(embed_dim, 0);
call    0 returned 100
call    1 returned 100
branch  2 taken 100 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 100
    50100:  225:        for (size_t i = 0; i < embed_dim; i++) {
branch  0 taken 50000
branch  1 taken 100 (fallthrough)
    50000:  226:            ss >> vec[i];
call    0 returned 50000
call    1 returned 50000
branch  2 taken 50000 (fallthrough)
branch  3 taken 0 (throw)
        -:  227:        }
     100*:  228:        if(vec.size() != embed_dim){
call    0 returned 100
branch  1 taken 0 (fallthrough)
branch  2 taken 100
    #####:  229:            cout << "Mismatch in sample size. Skipping sample" << endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  230:            continue;
        -:  231:        }
      100:  232:        data.push_back(move(vec)); // Use move to avoid copying
call    0 returned 100
call    1 returned 100
branch  2 taken 100 (fallthrough)
branch  3 taken 0 (throw)
      100:  233:    }
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0
call    3 returned 100
branch  4 taken 100 (fallthrough)
branch  5 taken 0
call    6 never executed
call    7 never executed
        1:  234:    return data;
call    0 returned 1
        1:  235:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 never executed
call    4 never executed
call    5 never executed
        -:  236:
function _Z23get_positional_encodingmm called 1 returned 100% blocks executed 71%
        1:  237:vector<vector<double>> get_positional_encoding(size_t sequence_length, size_t d_model) {
        2:  238:    vector<vector<double>> positional_encodings(sequence_length, vector<double>(d_model, 0.0f));
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
      101:  239:    for (size_t pos = 0; pos < sequence_length; pos++) {
branch  0 taken 100
branch  1 taken 1 (fallthrough)
    50100:  240:        for (size_t i = 0; i < d_model; i++) {
branch  0 taken 50000
branch  1 taken 100 (fallthrough)
    50000:  241:            if (i % 2 == 0) {
branch  0 taken 25000 (fallthrough)
branch  1 taken 25000
    25000:  242:                positional_encodings[pos][i] = sin(pos / pow(10000, (double)i / d_model));
call    0 returned 25000
call    1 returned 25000
call    2 returned 25000
        -:  243:            } else {
    25000:  244:                positional_encodings[pos][i] = cos(pos / pow(10000, (double)(i - 1) / d_model));
call    0 returned 25000
call    1 returned 25000
call    2 returned 25000
        -:  245:            }
        -:  246:        }
        -:  247:    }
        1:  248:    return positional_encodings;
        -:  249:}
        -:  250:
function _Z11add_vectorsRSt6vectorIS_IdSaIdEESaIS1_EES4_ called 2 returned 100% blocks executed 74%
        2:  251:vector<vector<double>> add_vectors(vector<vector<double>>& a, vector<vector<double>>& b) {
        4:  252:    vector<vector<double>> c(a.size(), vector<double>(a[0].size(), 0.0f));
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 2
call    8 returned 2
branch  9 taken 2 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 2
call   12 returned 2
      202:  253:    for (size_t i = 0; i < a.size(); i++) {
call    0 returned 202
branch  1 taken 200
branch  2 taken 2 (fallthrough)
   100200:  254:        for (size_t j = 0; j < a[0].size(); j++) {
call    0 returned 100200
call    1 returned 100200
branch  2 taken 100000
branch  3 taken 200 (fallthrough)
   100000:  255:            c[i][j] = a[i][j] + b[i][j];
call    0 returned 100000
call    1 returned 100000
call    2 returned 100000
call    3 returned 100000
call    4 returned 100000
call    5 returned 100000
        -:  256:        }
        -:  257:    }
        2:  258:    return c;
        -:  259:}
        -:  260:
function _Z10layer_normRSt6vectorIS_IdSaIdEESaIS1_EERS1_S5_f called 2 returned 100% blocks executed 80%
        2:  261:vector<vector<double>> layer_norm(vector<vector<double>>& input, vector<double>& gamma, vector<double>& beta, float epsilon = 1e-6) {
        2:  262:    size_t seq_len = input.size();
call    0 returned 2
        2:  263:    size_t dim = input[0].size();
call    0 returned 2
call    1 returned 2
        4:  264:    vector<vector<double>> output(seq_len, vector<double>(dim, 0.0f));
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 2
call    9 returned 2
        -:  265:
      202:  266:    for (size_t i = 0; i < seq_len; ++i) {
branch  0 taken 200
branch  1 taken 2 (fallthrough)
      200:  267:        double mean = 0.0f;
   100200:  268:        for (auto val : input[i]) mean += val;
call    0 returned 200
call    1 returned 200
call    2 returned 200
call    3 returned 100000
call    4 returned 100000
call    5 returned 100200
branch  6 taken 100000
branch  7 taken 200 (fallthrough)
      200:  269:        mean /= dim;
        -:  270:
      200:  271:        double var = 0.0f;
   100200:  272:        for (double val : input[i]) var += (val - mean) * (val - mean);
call    0 returned 200
call    1 returned 200
call    2 returned 200
call    3 returned 100000
call    4 returned 100000
call    5 returned 100200
branch  6 taken 100000
branch  7 taken 200 (fallthrough)
      200:  273:        var /= dim;
        -:  274:
   100200:  275:        for (size_t j = 0; j < dim; ++j) {
branch  0 taken 100000
branch  1 taken 200 (fallthrough)
   100000:  276:            output[i][j] = gamma[j] * ((input[i][j] - mean) / sqrt(var + epsilon)) + beta[j];
call    0 returned 100000
call    1 returned 100000
call    2 returned 100000
call    3 returned 100000
call    4 returned 100000
call    5 returned 100000
        -:  277:        }
        -:  278:    }
        2:  279:    return output;
        -:  280:}
        -:  281:
        -:  282:class EncoderLayer {
        -:  283:    public:
        -:  284:        size_t d_model;
        -:  285:        size_t num_heads;
        -:  286:        size_t ff_d;
        -:  287:
        -:  288:        MultiHeadAttention mha;
        -:  289:        FeedForward ff;
        -:  290:        
        -:  291:        vector<double> beta;
        -:  292:        vector<double> gamma;
        -:  293:        
function _ZN12EncoderLayerC2Emmm called 1 returned 100% blocks executed 52%
        1:  294:        EncoderLayer(size_t d_model, size_t num_heads, size_t ff_d) : d_model(d_model), num_heads(num_heads), ff_d(ff_d), mha(d_model, num_heads), ff(d_model, ff_d) {
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
        1:  295:            beta = vector<double>(d_model, 0.0f);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 never executed
        1:  296:            gamma = vector<double>(d_model, 1.0f);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 never executed
        1:  297:        }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  298:
function _ZN12EncoderLayer7forwardERSt6vectorIS0_IdSaIdEESaIS2_EE called 1 returned 100% blocks executed 60%
        1:  299:        vector<vector<double>> forward(vector<vector<double>>& x) {
        1:  300:            vector<vector<double>> attn_output = mha.forward(x);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  301:
        1:  302:            vector<vector<double>> addLayer1 = add_vectors(x, attn_output);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  303:            vector<vector<double>> norm1 = layer_norm(addLayer1, gamma, beta, 1e-6);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  304:
        1:  305:            vector<vector<double>> ff_output = ff.forward(norm1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  306:
        1:  307:            vector<vector<double>> addLayer2 = add_vectors(norm1, ff_output);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  308:            vector<vector<double>> norm2 = layer_norm(addLayer2, gamma, beta);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  309:
        2:  310:            return norm2;
        1:  311:        }
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  312:};
        -:  313:
function main called 1 returned 100% blocks executed 66%
        1:  314:int main() {
        -:  315:
        -:  316:    // transformer parameters
        1:  317:    size_t d_model = 500;
        1:  318:    size_t embed_dim = 500;
        1:  319:    size_t sequence_length = 100;
        1:  320:    size_t num_heads = 50;
        1:  321:    size_t ff_dim = 1280;
        -:  322:
        1:  323:    string input_file = "dataset_vectors.txt";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:  324:
        1:  325:    cout << "Loading the data from the file..." << endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -:  326:
        1:  327:    vector<vector<double>> input_vectors = read_data(input_file, sequence_length, embed_dim);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  328:    if(input_vectors.empty()){
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  329:        cout << "No data found in the file. Exiting..." << endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  330:        return 1;
        -:  331:    }
        1:  332:    cout << "Data read successfully with sequence length "<< input_vectors.size() << endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        -:  333:
        1:  334:    vector<double> sample = input_vectors[0];
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2:  335:    vector<vector<double>> sample_vector(sequence_length, vector<double>(embed_dim, 0.0f));
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
        -:  336:
      101:  337:    for(size_t i = 0; i< sequence_length; i++){
branch  0 taken 100
branch  1 taken 1 (fallthrough)
    50100:  338:        for(size_t j = 0; j < embed_dim; j++){
branch  0 taken 50000
branch  1 taken 100 (fallthrough)
    50000:  339:            sample_vector[i][j] = sample[i*embed_dim + j];
call    0 returned 50000
call    1 returned 50000
call    2 returned 50000
        -:  340:        }
        -:  341:    }
        -:  342:
        1:  343:    vector<vector<double>> positional_encodings = get_positional_encoding(sequence_length, d_model);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  344:    
      101:  345:    for(size_t i = 0; i < sequence_length; i++){
branch  0 taken 100
branch  1 taken 1 (fallthrough)
    50100:  346:        for(size_t j = 0; j < d_model; j++){
branch  0 taken 50000
branch  1 taken 100 (fallthrough)
    50000:  347:            sample_vector[i][j] += positional_encodings[i][j];
call    0 returned 50000
call    1 returned 50000
call    2 returned 50000
call    3 returned 50000
        -:  348:        }
        -:  349:    }
        -:  350:
        1:  351:    EncoderLayer encoder_layer(d_model, num_heads, ff_dim);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  352:    vector<vector<double>> encoder_output = encoder_layer.forward(sample_vector);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  353:
        1:  354:    cout << "Output after input data is passed through the transformer : " << endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  355:    ofstream outputFile("output.txt");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  356:
      101:  357:    for(auto row : encoder_output){
call    0 returned 1
call    1 returned 1
call    2 returned 100
call    3 returned 100
branch  4 taken 100 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 100
call    7 returned 101
branch  8 taken 100
branch  9 taken 1 (fallthrough)
    50100:  358:        for(auto val : row){
call    0 returned 100
call    1 returned 100
call    2 returned 50000
call    3 returned 50000
call    4 returned 50100
branch  5 taken 50000
branch  6 taken 100 (fallthrough)
    50000:  359:            outputFile << val << " ";
call    0 returned 50000
branch  1 taken 50000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 50000
branch  4 taken 50000 (fallthrough)
branch  5 taken 0 (throw)
    50000:  360:            cout << val << " ";
call    0 returned 50000
branch  1 taken 50000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 50000
branch  4 taken 50000 (fallthrough)
branch  5 taken 0 (throw)
        -:  361:        }
      100:  362:        cout << endl;
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:  363:    }
call    0 returned 100
call    1 never executed
        -:  364:
        1:  365:    return 0;
        1:  366:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
